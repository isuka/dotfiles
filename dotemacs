;; エスケープ文字を表示しない
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; howm設定　
;(defvar howm-view-title-header "#")  ; this should be evaluated in advance to handle markdown

(setq howm-menu-lang 'ja)
(global-set-key "\C-c,," 'howm-menu)
(autoload 'howm-menu "howm" "Hitori Otegaru Wiki Modoki" t)
(setq howm-directory "~/Dropbox/memo")
(add-to-list 'load-path "~/.emacs.d/howm")

;; howm: いちいち消すのも面倒なので内容が 0 ならファイルごと削除する
(if (not (memq 'delete-file-if-no-contents after-save-hook))
    (setq after-save-hook
          (cons 'delete-file-if-no-contents after-save-hook)))
(defun delete-file-if-no-contents ()
  (when (and
         (buffer-file-name (current-buffer))
         (string-match "\\.howm" (buffer-file-name (current-buffer)))
         (= (point-min) (point-max)))
    (delete-file
     (buffer-file-name (current-buffer)))))

;; http://howm.sourceforge.jp/cgi-bin/hiki/hiki.cgi?SaveAndKillBuffer
;; howm: C-cC-c で保存してバッファをキルする
(defun my-save-and-kill-buffer ()
  (interactive)
  (when (and
         (buffer-file-name)
         (string-match "\\.howm"
                       (buffer-file-name)))
    (save-buffer)
    (kill-buffer nil)))
(eval-after-load "howm"
  '(progn
     (define-key howm-mode-map
       "\C-c\C-c" 'my-save-and-kill-buffer)))

;; howm: markdown設定
; file associations
;(add-to-list 'auto-mode-alist '("\\.txt$" . outline-mode))
(defun markdown-text-mode ()
  (markdown-mode)       ; major
  (outline-minor-mode)  ; minor
)
(add-to-list 'auto-mode-alist '("\\.txt$" . markdown-text-mode))

; disable auto-fill-mode
(add-hook 'howm-mode-hook '(lambda () (auto-fill-mode -1)))


;; east asian ambiguous settings

(defun set-east-asian-ambiguous-width (width)
  (cond ((= emacs-major-version 22) (set-east-asian-ambiguous-width-22 width))
        ((> emacs-major-version 22) (set-east-asian-ambiguous-width-23 width))))

;; for emacs 22
(defun set-east-asian-ambiguous-width-22 (width)
  (if (= width 2)
    (utf-translate-cjk-set-unicode-range
      '((#x00a2 . #x00a3)
        (#x00a7 . #x00a8)
        (#x00ac . #x00ac)
        (#x00b0 . #x00b1)
        (#x00b4 . #x00b4)
        (#x00b6 . #x00b6)
        (#x00d7 . #x00d7)
        (#X00f7 . #x00f7)
        (#x0370 . #x03ff)
        (#x0400 . #x04FF)
        (#x2000 . #x206F)
        (#x2100 . #x214F)
        (#x2190 . #x21FF)
        (#x2200 . #x22FF)
        (#x2300 . #x23FF)
        (#x2500 . #x257F)
        (#x25A0 . #x25FF)
        (#x2600 . #x26FF)
        (#x2e80 . #xd7a3) (#xff00 . #xffef)))))

;; for over 23 (checked work in emacs 24)
(defun set-east-asian-ambiguous-width-23 (width)
  (while (char-table-parent char-width-table)
         (setq char-width-table (char-table-parent char-width-table)))
  (let ((table (make-char-table nil)))
    (dolist (range
              '(#x00A1 #x00A4 (#x00A7 . #x00A8) #x00AA (#x00AD . #x00AE)
                (#x00B0 . #x00B4) (#x00B6 . #x00BA) (#x00BC . #x00BF)
                #x00C6 #x00D0 (#x00D7 . #x00D8) (#x00DE . #x00E1) #x00E6
                (#x00E8 . #x00EA) (#x00EC . #x00ED) #x00F0
                (#x00F2 . #x00F3) (#x00F7 . #x00FA) #x00FC #x00FE
                #x0101 #x0111 #x0113 #x011B (#x0126 . #x0127) #x012B
                (#x0131 . #x0133) #x0138 (#x013F . #x0142) #x0144
                (#x0148 . #x014B) #x014D (#x0152 . #x0153)
                (#x0166 . #x0167) #x016B #x01CE #x01D0 #x01D2 #x01D4
                #x01D6 #x01D8 #x01DA #x01DC #x0251 #x0261 #x02C4 #x02C7
                (#x02C9 . #x02CB) #x02CD #x02D0 (#x02D8 . #x02DB) #x02DD
                #x02DF (#x0300 . #x036F) (#x0391 . #x03A9)
                (#x03B1 . #x03C1) (#x03C3 . #x03C9) #x0401
                (#x0410 . #x044F) #x0451 #x2010 (#x2013 . #x2016)
                (#x2018 . #x2019) (#x201C . #x201D) (#x2020 . #x2022)
                (#x2024 . #x2027) #x2030 (#x2032 . #x2033) #x2035 #x203B
                #x203E #x2074 #x207F (#x2081 . #x2084) #x20AC #x2103
                #x2105 #x2109 #x2113 #x2116 (#x2121 . #x2122) #x2126
                #x212B (#x2153 . #x2154) (#x215B . #x215E)
                (#x2160 . #x216B) (#x2170 . #x2179) (#x2190 . #x2199)
                (#x21B8 . #x21B9) #x21D2 #x21D4 #x21E7 #x2200
                (#x2202 . #x2203) (#x2207 . #x2208) #x220B #x220F #x2211
                #x2215 #x221A (#x221D . #x2220) #x2223 #x2225
                (#x2227 . #x222C) #x222E (#x2234 . #x2237)
                (#x223C . #x223D) #x2248 #x224C #x2252 (#x2260 . #x2261)
                (#x2264 . #x2267) (#x226A . #x226B) (#x226E . #x226F)
                (#x2282 . #x2283) (#x2286 . #x2287) #x2295 #x2299 #x22A5
                #x22BF #x2312 (#x2460 . #x24E9) (#x24EB . #x254B)
                (#x2550 . #x2573) (#x2580 . #x258F) (#x2592 . #x2595)
                (#x25A0 . #x25A1) (#x25A3 . #x25A9) (#x25B2 . #x25B3)
                (#x25B6 . #x25B7) (#x25BC . #x25BD) (#x25C0 . #x25C1)
                (#x25C6 . #x25C8) #x25CB (#x25CE . #x25D1)
                (#x25E2 . #x25E5) #x25EF (#x2605 . #x2606) #x2609
                (#x260E . #x260F) (#x2614 . #x2615) #x261C #x261E #x2640
                #x2642 (#x2660 . #x2661) (#x2663 . #x2665)
                (#x2667 . #x266A) (#x266C . #x266D) #x266F #x273D
                (#x2776 . #x277F) (#xE000 . #xF8FF) (#xFE00 . #xFE0F)
                #xFFFD
                ))
      (set-char-table-range table range width))
    (optimize-char-table table)
    (set-char-table-parent table char-width-table)
    (setq char-width-table table)))

(set-east-asian-ambiguous-width 2)

;; arduinoファイル編集時にシンタックスハイライト
;; https://github.com/bookest/arduino-mode
(add-to-list 'load-path "~/.emacs.d/")
(setq auto-mode-alist (cons '("\\.\\(pde\\|ino\\)$" . arduino-mode)
auto-mode-alist))
(autoload 'arduino-mode "arduino-mode" "Arduino editing mode." t)

;;逆向きにウィンドウを移動させる
(global-set-key "\C-xp" (lambda () (interactive) (other-window -1)))

;; EmacsからSvnを利用可能にする
(autoload 'svn-status "dsvn" "Run `svn status'." t)
(autoload 'svn-update "dsvn" "Run `svn update'." t)

; ;; diffの表示方法を変更
; (defun diff-mode-setup-faces ()
;   ;; 追加された行は緑で表示
;   (set-face-attribute 'diff-added nil
;                       :foreground "white" :background "dark green")
;   ;; 削除された行は赤で表示
; (set-face-attribute 'diff-removed nil
;                       :foreground "white" :background "dark red")
;   ;; 文字単位での変更箇所は色を反転して強調
;   (set-face-attribute 'diff-refine-change nil
;                      :foreground nil :background nil
;                      :weight 'bold :inverse-video t))
; (add-hook 'diff-mode-hook 'diff-mode-setup-faces)

; ;; diffを表示したらすぐに文字単位での強調表示も行う
; (defun diff-mode-refine-automatically ()
;   (diff-auto-refine-mode t))
; (add-hook 'diff-mode-hook 'diff-mode-refine-automatically)

; ;; diff関連の設定
; (defun magit-setup-diff ()
;   ;; diffを表示しているときに文字単位での変更箇所も強調表示する
;   ;; 'allではなくtにすると現在選択中のhunkのみ強調表示する
;   (setq magit-diff-refine-hunk 'all)
;   ;; diff用のfaceを設定する
;   (diff-mode-setup-faces)
;   ;; diffの表示設定が上書きされてしまうのでハイライトを無効にする
;   (set-face-attribute 'magit-item-highlight nil :inherit nil))
; (add-hook 'magit-mode-hook 'magit-setup-diff)

;;(set-language-environment "Japanese")
;;(set-terminal-coding-system 'utf-8)
;;(set-keyboard-coding-system 'utf-8)

;; 現在時刻の挿入
(defun ctime()
  (interactive)
  (insert (format-time-string "[%Y-%02m-%02d %02H:%02M:%02S]")))
(global-set-key "\C-ct" 'ctime)

;; 本日の挿入
(defun cdate()
  (interactive)
  (insert (format-time-string "[%Y-%02m-%02d(%a)]")))
(global-set-key "\C-cd" 'cdate)

;; changelogメモファイルの指定
(defun memo()
  (interactive)
  (add-change-log-entry
   nil
   (expand-file-name "~/Documents/log.txt"))
   (insert (format-time-string "[%Y-%02m-%02d %02H:%02M:%02S] ")))
;; C-x Mで新しいログを挿入する
(define-key ctl-x-map "M" 'memo)

;; 分割ウィンドウをfbnpでサイズ変更
(defun window-resizer ()
  "Control window size and position."
  (interactive)
  (let ((window-obj (selected-window))
        (current-width (window-width))
        (current-height (window-height))
        (dx (if (= (nth 0 (window-edges)) 0) 1
              -1))
        (dy (if (= (nth 1 (window-edges)) 0) 1
              -1))
        c)
    (catch 'end-flag
      (while t
        (message "size[%dx%d]"
                 (window-width) (window-height))
        (setq c (read-char))
        (cond ((= c ?f)
               (enlarge-window-horizontally dx))
              ((= c ?b)
               (shrink-window-horizontally dx))
              ((= c ?n)
               (enlarge-window dy))
              ((= c ?p)
               (shrink-window dy))
              ;; otherwise
              (t
               (message "Quit")
               (throw 'end-flag t)))))))

;; 分割ウィンドウ移動C-qをプリフィックスキー化
(define-key global-map "\C-q" (make-sparse-keymap))

;; quoted-insertはC-q C-qへ割り当て(使用していないと思うのでコメントアウト)
;; (global-set-key "\C-q\C-q" 'quoted-insert)

;; C-q C-rでwindow-resizer呼び出し
(global-set-key "\C-q\C-r" 'window-resizer)

;; 分割ウィンドウを移動
(global-set-key "\C-qf" 'windmove-right)
(global-set-key "\C-qb" 'windmove-left)
(global-set-key "\C-qn" 'windmove-down)
(global-set-key "\C-qp" 'windmove-up)

;; 折り返し動作をトグル
(defun toggle-truncate-lines ()
  (interactive)
  (if truncate-lines
		(setq truncate-lines nil)
	(setq truncate-lines t))
  (recenter))

(global-set-key "\C-c\C-l" 'toggle-truncate-lines)

;; C-x pでC-x oの逆の操作(前のウィンドウへ移動)
(global-set-key "\C-xp" (lambda () (interactive)(other-window -1)))

;; カラー設定
(global-font-lock-mode t)

;; スクロールを１行ずつにする
(setq scroll-conservatively 35
      scroll-margin 5
      scroll-step1)

;; shell modeでもスクロールを1行ずつにする
(setq comint-scroll-show-maximum-output t)

;; C-v M-vでカーソル位置を固定する
(setq scroll-preserve-screen-position t)

;; Tab幅を4にする
(setq-default tab-width 4)
(setq default-tab-width 4)
(setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
						64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))

;; インデントをTabの変わりにスペースにする
(setq-default indent-tabs-mode nil)
(setq indent-line-function 'indent-relative-maybe)

;; C/C++共通設定
(add-hook 'c-mode-common-hook
		  '(lambda ()
			 (c-set-style "GNU")
			 (setq c-basic-offset 4)
             ;; 演算式が複数行にまたがる時のオフセット
             (c-set-offset 'statement-cont 'c-lineup-math)))

;; バックアップファイルを作成しない
(setq make-backup-files nil)

;; 自動保存を無効化
;;(setq auto-save-default nil)

;; 行と列の表示
(line-number-mode 1)
(column-number-mode 1)

;; 時計表示
(setq display-time-string-forms
      '((format "%s/%s(%s) %s:%s"
                month day dayname
                24-hours minutes
                )))

(display-time)
(setq display-time-day-and-date t)

;; 対応する括弧を光らせる
(show-paren-mode 1)

;; リージョンに色をつける
(transient-mark-mode 1)

;; Ctrl-zでUndo
(global-set-key "\C-z" 'undo)

;; 改行キーでオートインデント
;;(global-set-key "\C-m" 'newline-and-indent)
;;(global-set-key "\C-j" 'newline)

;; Ctrl-hでバックスペース
(global-set-key "\C-h" 'backward-delete-char)

;; Ctrl-kで改行までkill
(setq kill-whole-line t)

;; M-x compileをC-c cに割り当て
(define-key mode-specific-map "c" 'compile)

;; Shell mode時上下でヒストリ補完
(add-hook 'shell-mode-hook
          (function (lambda ()
                      (define-key shell-mode-map [up] 'comint-previous-input)
                      (define-key shell-mode-map [down] 'comint-next-input))))

;; シェルバッファの上限を3000にする
(add-hook 'shell-mode-hook
          (function (lambda ()
                      (setq comint-buffer-maximum-size 3000)
                      (setq comint-output-filter-functions 'comint-truncate-buffer))))

;;(custom-set-variables
;;  ;; custom-set-variables was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;; '(gud-gdb-command-name "gdb --annotate=1")
;; '(large-file-warning-threshold nil))

;;(custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;; '(font-lock-comment-face ((((class color) (min-colors 8) (background light)) (:foreground "red")))))

(put 'downcase-region 'disabled nil)

(put 'upcase-region 'disabled nil)

;; ruby-modeの設定
(autoload 'ruby-mode "ruby-mode"
    "Mode for editing ruby source files" t)
(setq auto-mode-alist
            (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                                                                          interpreter-mode-alist))
(autoload 'run-ruby "inf-ruby"
    "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
    "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook
                    '(lambda ()
                                    (inf-ruby-keys)))

;; カーソルを残したまま2画面に分割したバッファを入れ替える
(defun swap-screen()
  "Swap two screen,leaving cursor at current window."
  (interactive)
  (let ((thiswin (selected-window))
        (nextbuf (window-buffer (next-window))))
    (set-window-buffer (next-window) (window-buffer))
    (set-window-buffer thiswin nextbuf)))

;; カーソルと一緒に2画面に分割したバッファを入れ替える
(defun swap-screen-with-cursor()
  "Swap two screen,with cursor in same buffer."
  (interactive)
  (let ((thiswin (selected-window))
        (thisbuf (window-buffer)))
    (other-window 1)
    (set-window-buffer thiswin (window-buffer))
    (set-window-buffer (selected-window) thisbuf)))

;; F2で画面を入れ替える
(global-set-key [f2] 'swap-screen)

;; Shift-F2でカーソルと一緒に画面を入れ替える
(global-set-key [S-f2] 'swap-screen-with-cursor)

;; howmの設定
(setq howm-menu-lang 'ja)
(global-set-key "\C-c,," 'howm-menu)
(mapc
  (lambda (f)
    (autoload f
      "howm" "Hitori Otegaru Wiki Modoki" t))
   '(howm-menu howm-list-all howm-list-recent
                    howm-list-grep howm-create
                    howm-keyword-to-kill-ring))

;; scratchバッファを消さないようにする
(defun my-make-scratch (&optional arg)
  (interactive)
  (progn
    ;; "*scratch*" を作成して buffer-list に放り込む
    (set-buffer (get-buffer-create "*scratch*"))
    (funcall initial-major-mode)
    (erase-buffer)
    (when (and initial-scratch-message (not inhibit-startup-message))
      (insert initial-scratch-message))
    (or arg (progn (setq arg 0)
                   (switch-to-buffer "*scratch*")))
    (cond ((= arg 0) (message "*scratch* is cleared up."))
          ((= arg 1) (message "another *scratch* is created")))))

(add-hook 'kill-buffer-query-functions
          ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
          (lambda ()
            (if (string= "*scratch*" (buffer-name))
                (progn (my-make-scratch 0) nil)
              t)))

(add-hook 'after-save-hook
          ;; *scratch* バッファの内容を保存したら *scratch* バッファを新しく作る
          (lambda ()
            (unless (member (get-buffer "*scratch*") (buffer-list))
              (my-make-scratch 1))))

;; 拡張子が.tのファイルをperl-modeで開く
(add-to-list 'auto-mode-alist '("\\.t\\'" . perl-mode))